string version="0.3";
/*
* graphical user interface bgt dictionary converter.
* version: 0.3
* author: harry
* author_email: harrymk64@gmail.com
*/
#include"include.bgt"
int tmpint;
uint tmpuint;
string tmpstring;
bool tmpbool;
double tmpdoub;
float tmpfloat;
long mlong;
short mshort;
uint8 muint8;
int8 mint8;
int[] types={0,1};
void main()
{
error=e_none;
string a=input_box("source","welcome to the bgt dictionary converter (version "+version+"). type the name of the source file");
if(a=="") exit();
string b=input_box("dest","type the name of the destination file");
if(b=="") exit();
string[] typelist;
for(uint i=0; i<types.length(); i++)
{
typelist.insert_last(i+": "+get_type_description(types[i]));
}
string c=input_box("execution type","type the number of the type that should be executed. the following types are valid inputs:\r\n"+convert_to_list(typelist));
if(a==""||b==""||c=="") exit();
int t=string_to_number(c);
perform(a,b,t);
exit();
}
string totext(string src,string dst){
error=e_none;
file f;
f.open(src,"rb");
string s=f.read();
dictionary savedict=deserialize(s);
string[] keys=savedict.get_keys();
if(keys.length()<1)
{
error=e_nokey;
return"";
}
string var="";
keys.sort_ascending(0, keys.length());
double length=0;
double failed=0;
for(uint i=0;i<keys.length();i++)
{
if (savedict.get(keys[i],tmpint))
{
var+=keys[i]+"="+"i="+tmpint+"\n";
length++;
continue;
}
if (savedict.get(keys[i],mlong))
{
var+=keys[i]+"="+"l="+mlong+"\n";
length++;
continue;
}
if (savedict.get(keys[i],mshort))
{
var+=keys[i]+"="+"sh="+mshort+"\n";
length++;
continue;
}
if (savedict.get(keys[i],muint8))
{
var+=keys[i]+"="+"uint8="+muint8+"\n";
length++;
continue;
}
if (savedict.get(keys[i],mint8))
{
var+=keys[i]+"="+"int8="+mint8+"\n";
length++;
continue;
}

if (savedict.get(keys[i],tmpuint))
{
var+=keys[i]+"="+"u="+tmpuint+"\n";
length++;
continue;
}
if (savedict.get(keys[i],tmpfloat))
{
var+=keys[i]+"="+"f="+tmpfloat+"\n";
length++;
continue;
}
if (savedict.get(keys[i],tmpdoub))
{
var+=keys[i]+"="+"d="+tmpdoub+"\n";
length++;
continue;
}
if (savedict.get(keys[i],tmpstring))
{
if(tmpstring.is_empty()){
tmpstring=" ";
}
var+=keys[i]+"="+"s="+tmpstring+"\n";
length++;
continue;
}
if (savedict.get(keys[i],tmpbool))
{
var+=keys[i]+"="+"b="+tmpbool+"\n";
length++;
continue;
}
failed++;
}
f.close();
if(var!="")
{
f.open(dst,"wb");
if(var!="") f.write(var);
f.close();
}
return "out of "+keys.length()+", "+length+" were retrieve, and "+failed+" were failed";
}
string fromtext(string src,string dst){
error=e_none;
file f;
string content;
string[] items;
string[] item;
string itemname;
string itemtype;
dictionary savedict;
f.open(src,"r");
content=f.read();
items=string_split(content,"\n",true);
if(items.length()<1)
{
error=e_nokey;
return"";
}
double length=0;
double failed=0;
for(uint i=0;i<items.length();i++){
item=string_split(items[i],"=",true);
if(item.length()<3)
{
failed++;
continue;
}
itemname=item[0];
itemtype=item[1];
if(itemtype=="i"){
tmpint=string_to_number(item[2]);
savedict.set(itemname,tmpint);
length++;
continue;
}
if(itemtype=="u"){
tmpuint=string_to_number(item[2]);
savedict.set(itemname,tmpuint);
length++;
continue;
}
if(itemtype=="l"){
mlong=string_to_number(item[2]);
savedict.set(itemname,mlong);
length++;
continue;
}
if(itemtype=="sh"){
mshort=string_to_number(item[2]);
savedict.set(itemname,mshort);
length++;
continue;
}
if(itemtype=="uint8"){
muint8=string_to_number(item[2]);
savedict.set(itemname,muint8);
length++;
continue;
}
if(itemtype=="int8"){
mint8=string_to_number(item[2]);
savedict.set(itemname,mint8);
length++;
continue;
}

if(itemtype=="f"){
tmpfloat=string_to_number(item[2]);
savedict.set(itemname,tmpfloat);
length++;
continue;
}
if(itemtype=="d"){
tmpdoub=string_to_number(item[2]);
savedict.set(itemname,tmpdoub);
length++;
continue;
}
if(itemtype=="b"){
if(item[2]=="0"){
tmpbool=false;
savedict.set(itemname,tmpbool);
length++;
}
if(item[2]=="1"){
tmpbool=true;
savedict.set(itemname,tmpbool);
length++;
}
}
if(itemtype=="s"){
tmpstring=item[2];
savedict.set(itemname,tmpstring);
length++;
}
}
string savedata=serialize(savedict);
f.close();
if(savedata!="")
{
f.open(dst,"wb");
f.write(savedata);
f.close();
}
return "out of "+items.length()+", "+length+" were saved into the dictionary, and "+failed+" keys were failed.";
}